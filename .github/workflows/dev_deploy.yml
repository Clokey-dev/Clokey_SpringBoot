name: CI/CD Pipeline

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_URL: ${{ secrets.DB_URL }}
      REST_API_KEY: ${{ secrets.REST_API_KEY }}
      TAG: develop-latest  # TAG 설정

    steps:
      - uses: actions/checkout@v4

      - name: Generate .env file
        run: |
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" > .env
          echo "TAG=${{ env.TAG }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_URL=${{ secrets.DB_URL }}" >> .env
          echo "REST_API_KEY=${{ secrets.REST_API_KEY }}" >> .env

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle Wrapper
        run: |
          ./gradlew --stop && ./gradlew clean --refresh-dependencies
          ./gradlew clean build
          ls -l build/libs


      - name: Build Docker Image
        run: |
          docker build -t yongjun0511/clokey-docker:${{ env.TAG }} .  # 환경 변수 TAG 사용

      - name: Push Docker Image
        run: |
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker push yongjun0511/clokey-docker:${{ env.TAG }}  # 환경 변수 TAG 사용

      - name: Copy docker-compose file to remote
        uses: appleboy/scp-action@v0.1.3
        with:
          username: ubuntu
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./docker-compose.yml"
          target: "/home/ubuntu/cicd/"

      - name: Copy .env file to remote
        uses: appleboy/scp-action@v0.1.3
        with:
          username: ubuntu
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./.env"
          target: "/home/ubuntu/cicd/"

      - name: Deploy Blue-Green
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/cicd
            
            source .env
            
            # 활성화된 서비스 확인
            if docker-compose --env-file /home/ubuntu/cicd/.env -f docker-compose.yml ps | grep -q "app_blue.*Up"; then
            TARGET=green
            OLD=blue
            elif docker-compose --env-file /home/ubuntu/cicd/.env -f docker-compose.yml ps | grep -q "app_green.*Up"; then
            TARGET=blue
            OLD=green
            else
            # 아무 서비스도 실행되지 않은 경우 (최초 실행)
            TARGET=blue  # 또는 green, 기본값 설정
            OLD=none
            fi
            
            echo "TARGET: $TARGET"
            echo "OLD: $OLD"
            
            
            
            # 환경 변수와 함께 Docker Compose 실행
            docker-compose --env-file /home/ubuntu/cicd/.env -f docker-compose.yml up -d app_$TARGET
            
            # 첫 실행이 아니라면 구 그룹을 내립니다.
            if [ "$OLD" != "none" ]; then
            sleep 10
            docker-compose -f docker-compose.yml down app_$OLD
            fi
          
      
