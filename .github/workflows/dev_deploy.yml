name: CI/CD Pipeline

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_URL: ${{ secrets.DB_URL }}
      REST_API_KEY: ${{ secrets.REST_API_KEY }}
      TAG: develop-latest  # TAG 설정

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle Wrapper
        run: |
          ./gradlew --stop && ./gradlew clean --refresh-dependencies
          ./gradlew clean build
          ls -l build/libs

      - name: SSH to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            whoami
            ls -al

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: cicdsample
          path: ./build/libs/*.jar

      - name: Copy jar file to remote
        uses: appleboy/scp-action@v0.1.3
        with:
          username: ubuntu
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./build/libs/*.jar"
          target: "/home/ubuntu/cicd"
          debug: true




      - name: Build Docker Image
        run: |
          docker build -t yongjun0511/clokey-docker:${{ env.TAG }} .  # 환경 변수 TAG 사용

      - name: Push Docker Image
        run: |
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker push yongjun0511/clokey-docker:${{ env.TAG }}  # 환경 변수 TAG 사용

      - name: Copy docker-compose file to remote
        uses: appleboy/scp-action@v0.1.3
        with:
          username: ubuntu
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./docker-compose.yml"
          target: "/home/ubuntu/cicd/"

      - name: Generate .env file
        run: |
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" > .env
          echo "TAG=${{ env.TAG }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_URL=${{ secrets.DB_URL }}" >> .env
          echo "REST_API_KEY=${{ secrets.REST_API_KEY }}" >> .env

      - name: Copy .env file to remote
        uses: appleboy/scp-action@v0.1.3
        with:
         username: ubuntu
         host: ${{ secrets.EC2_HOST }}
         key: ${{ secrets.EC2_SSH_KEY }}
         source: "./.env"
         target: "/home/ubuntu/cicd/"

      - name: Deploy Blue-Green
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # .env 파일 로드
            if [ -f /home/ubuntu/cicd/.env ]; then
              source /home/ubuntu/cicd/.env
            else
              echo "Error: .env file not found!"
              exit 1
            fi

            # 환경 변수 확인 (선택적)
            echo "DB_USERNAME is $DB_USERNAME"
            echo "DB_PASSWORD is $DB_PASSWORD"
            echo "DB_URL is $DB_URL"
            echo "REST_API_KEY is $REST_API_KEY"
            echo "Current TAG: $TAG"

            cd /home/ubuntu/cicd

            # 활성화된 색상 확인
            if docker-compose -f docker-compose.yml ps | grep app_blue; then
              TARGET=green
              OLD=blue
            else
              TARGET=blue
              OLD=green
            fi

            # 환경 변수와 함께 Docker Compose 실행
            docker-compose --env-file /home/ubuntu/cicd/.env -f docker-compose.yml up -d app_$TARGET

            # 새 그룹이 실행된 후 구 그룹 중지
            sleep 10
            docker-compose -f docker-compose.yml down app_$OLD




      - name: Execute deploy script
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            if [ ! -f /home/ubuntu/cicd/deploy.sh ]; then
              echo "Error: deploy.sh not found on remote server!"
              exit 1
            fi
            chmod +x /home/ubuntu/cicd/deploy.sh
            sh /home/ubuntu/cicd/deploy.sh
